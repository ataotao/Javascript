// "python php ruby javascript jsonp perhapsphpisoutdated"于该字符串，使用纯正则获取 所有带p 但是不能包含ph 的单词
// \b为边界字符，范围为\w和\W之间的字符。
// ()标识的是子表达式。
// (?!)标识的是反向先行断言，和子表达式不同是先行断言并不会被记录。
// [^]标识的是取不满足条件的集合
// 所以上面的正则意思为取边界之间的含有『p』但是后面紧跟的字符串不是『h』或『空格』，同时后面也不含有『ph』的字符串

var web_development = "python php ruby javascript jsonp perhapsphpisoutdated";
var regexp = /\b([^p\s]*p(?!h)[^p\s]*)+\b/g;
var res = web_development.match(regexp);
console.log(res);

/*******************************************************************
 * 一、入门
 *******************************************************************/

// \b是正则表达式规定的一个特殊代码（好吧，某些人叫它元字符，metacharacter），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是\b并不匹配这些单词分隔字符中的任何一个，`它只匹配一个位置`。

var str = "him hi history,hi high hi,hi,hiLucy";
var regexp = /\bhi\b/g;
var res = str.match(regexp);
console.log(res);

// 假如你要找的是hi后面不远处跟着一个Lucy，你应该用\bhi\b.*\bLucy\b。
// 这里.是另一个元字符，匹配除了换行符以外的任意字符。*同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定*前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，.*连在一起就意味着任意数量的不包含换行的字符。现在\bhi\b.*\bLucy\b的意思就很明显了：先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词。
// 换行符就是'\n',ASCII编码为10(十六进制0x0A)的字符。
// 如果需要更精确的说法，\b匹配这样的位置：它的前一个字符和后一个字符不全是(一个是,一个不是或不存在)\w。
var str = "him hi,Lucy history hi high hi,hi,hi hi Lucy"
var regexp = /\bhi\b.?\bLucy\b/g;
var res = str.match(regexp);
console.log(res);

// 如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：
// 0\d\d-\d\d\d\d\d\d\d\d匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字(也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形)。
// 这里的\d是个新的元字符，匹配一位数字(0，或1，或2，或……)。-不是元字符，只匹配它本身——连字符(或者减号，或者中横线，或者随你怎么称呼它)。
// 为了避免那么多烦人的重复，我们也可以这样写这个表达式：0\d{2}-\d{8}。这里\d后面的{2}({8})的意思是前面\d必须连续重复匹配2次(8次)
var str = "020-88888888"
// var regexp = /0\d\d-\d\d\d\d\d\d\d\d/;
var regexp = /0\d{2}-\d{8}/;
var res = str.match(regexp);
console.log(res);

/*******************************************************************
 * 二、测试正则表达式
 *******************************************************************/
// .Net下的工具 Regester。
// http://deerchao.net/tools/regester/index.htm

/*******************************************************************
 * 三、元字符
 *******************************************************************/
// 现在你已经知道几个很有用的元字符了，如\b,.,*，还有\d.正则表达式里还有更多的元字符，比如\s匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。\w匹配字母或数字或下划线或汉字等。

// 好吧，现在我们说说正则表达式里的单词是什么意思吧：就是不少于一个的连续的\w。不错，这与学习英文时要背的成千上万个同名的东西的确关系不大 :)

// \ba\w*\b匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w*)，最后是单词结束处(\b)。
var str = "Lorem ipsum dolor sit amet, amet aonsectetur"
var regexp = /\ba\w*\b/g;
var res = str.match(regexp);
console.log(res);

// \d+匹配1个或更多连续的数字。这里的+是和*类似的元字符，不同的是*匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次, ?是匹配0或者1次。

var str = "66a adsada"
var regexp1 = /\d+a/g;
var regexp2 = /\d?a/g;
var regexp3 = /\d*a/g;
var res1 = str.match(regexp1);
var res2 = str.match(regexp2);
var res3 = str.match(regexp3);
console.log(res1);
console.log(res2);
console.log(res3);

// \b\w{6}\b 匹配刚好6个字符的单词。 [\u4E00-\u9FA5]{6} 匹配6个中文汉字
var str = "你好呀我很好 aaaaaa 你好呀我很好";
// var regexp = /[\u4E00-\u9FA5]{6}|\w{6}/g; // 这里不能加上\b，因为汉字不属于单词
var regexp = /\b\w{6}\b/g;
var res = str.match(regexp);
console.log(res);

/**
 * 表1 .常用的元字符
 * 代码     说明
 * .        匹配除换行符以外的任意字符
 * \w       匹配字母或数字或下划线或汉字
 * \s       匹配任意的空白符
 * \d       匹配数字
 * \b       匹配单词的开始或结束
 * ^        匹配字符串的开始
 * $        匹配字符串的结束
 */

//  元字符^（和数字6在同一个键位上的符号）和$都匹配一个位置，这和\b有点类似。^匹配你要用来查找的字符串的开头，$匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：^\d{5,12}$。

// 这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。

// 因为使用了^和$，所以输入的整个字符串都要用来和\d{5,12}来匹配，也就是说整个输入必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。

// 和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，^和$的意义就变成了匹配行的开始处和结束处

// 正则表达式引擎通常会提供一个“测试指定的字符串是否匹配一个正则表达式”的方法，如JavaScript里的RegExp.test()方法或.NET里的Regex.IsMatch()方法。这里的匹配是指是字符串里有没有符合表达式规则的部分。如果不使用^和$的话，对于\d{5,12}而言，使用这样的方法就只能保证字符串里包含5到12连续位数字，而不是整个字符串就是5到12位数字

var str = `
750564
609076598
`;
var regexp = /^\d{5,12}$/gm;
// var regexp = /\b\d{5,12}\b/g;
var res = str.match(regexp);
console.log(res);

/*******************************************************************
 * 四、字符转义
 *******************************************************************/

// 如果你想查找元字符本身的话，比如你查找.,或者*,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用\来取消这些字符的特殊意义。因此，你应该使用\.和\*。当然，要查找\本身，你也得用\\.

// 例如：deerchao\.net匹配deerchao.net，C:\\Windows匹配C:\Windows。

var str = `
deerchao.net
C:\\Windows
`;
var regexp = /^\w+\.\w+|.*\\\w+$/gm;
var res = str.match(regexp);
console.log(res);


/*******************************************************************
 * 五、重复
 *******************************************************************/
// 你已经看过了前面的*,+,{2},{5,12}这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如*,{5,12}等)：
/**
 * 表2.常用的限定符
 * 代码/语法 	说明
 * * 	       重复零次或更多次
 * + 	       重复一次或更多次
 * ? 	       重复零次或一次
 * {n} 	       重复n次
 * {n,}        重复n次或更多次
 * {n,m}       重复n到m次
 */
// 下面是一些使用重复的例子：
// Windows\d+匹配Windows后面跟1个或更多数字

// ^\w+匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)

var str = `Windows12345`;
var regexp = /Windows\d+$/;
var res = str.match(regexp);
console.log(res);

var str = `
Windows12345
abc ds
`;
var regexp = /^\w+/gm;
var res = str.match(regexp);
console.log(res);

/*******************************************************************
 * 六、字符类
 *******************************************************************/
// 要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？(JS正则貌似没有这个问题)
// 很简单，你只需要在方括号里列出它们就行了，像[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。
var str = `a,e,i,o,u`;
var regexp = /[aeiou]|[.?!]/g;
var res = str.match(regexp);
console.log(res);

// 我们也可以轻松地指定一个字符范围，像[0-9]代表的含意与\d就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于\w（如果只考虑英文的话）。
var str = `1asd25Ss1`;
var regexp = /[0-9a-zA-Z]/g;
var res = str.match(regexp);
console.log(res);

// 下面是一个更复杂的表达式：/\(?0\d{2}[) -]?\d{8}/。
// 这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符\(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。
// “(”和“)”也是元字符，后面的分组节里会提到，所以在这里需要使用转义。
var str = `(010)88886666，或022-22334455，或02912345678，或029 12345678 029/12345678 +86 020 88888888`;
var regexp = /(\+\d{2} )?\(?0\d{2}[)/ -]?\d{8}/g;
var res = str.match(regexp);
console.log(res);

/*******************************************************************
 * 七、分枝条件
 *******************************************************************/
// 不幸的是，刚才那个表达式也能匹配010)12345678或(022-87654321这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。听不明白？没关系，看例子

// 0\d{2}-\d{8}|0\d{3}-\d{7}这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。
var str = `010-12345678 0376-2233445`;
var regexp = /0\d{2}-\d{8}|0\d{3}-\d{7}/g; 
var res = str.match(regexp);
console.log(res);

// \(0\d{2}\)[- ]?\d{8}|0\d{2}[- ]?\d{8}这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用分枝条件把这个表达式扩展成也支持4位区号的。
var str = `010-12345678 010 12345678 01012345678 (010)12345678 (010) 12345678 (010)-12345678 010)12345678 (022-87654321`;
var regexp = /\(0\d{2,3}\)[- ]?\d{8}|0\d{2,3}[- ]?\d{8}/g; 
var res = str.match(regexp);
console.log(res);

// \d{5}-\d{4}|\d{5}这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：使用分枝条件时，要注意各个条件的顺序。如果你把它改成\d{5}|\d{5}-\d{4}的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。
var str = `55555-4444-4444`;
var regexp = /\d{5}-\d{4}-\d{4}/; 
var res = str.match(regexp);
console.log(res);

/*******************************************************************
 * 八、分组
 *******************************************************************/
// 我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。
// (\d{1,3}\.){3}\d{1,3}是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3}匹配1到3位的数字，(\d{1,3}\.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})。

// IP地址中每个数字都不能大于255. 经常有人问我, 01.02.03.04 这样前面带有0的数字, 是不是正确的IP地址呢? 答案是: 是的, IP 地址里的数字可以包含有前导 0 (leading zeroes).
var str = `192.168.1.118`;
var regexp = /(\d{1,3}\.){3}\d{1,3}/;
var res = str.match(regexp);
console.log(res);

// 不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。
var str = `
192.168.1.118
256.300.888.999
202.96.38.65
`;
var regexp = /((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/g;
var res = str.match(regexp);
console.log(res);

/*******************************************************************
 * 九、反义
 *******************************************************************/
// 有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：

/**
 * 表3.常用的反义代码
 * 代码/语法      说明
 * \W	        匹配任意不是字母，数字，下划线，汉字的字符
 * \S	        匹配任意不是空白符的字符
 * \D	        匹配任意非数字的字符
 * \B	        匹配不是单词开头或结束的位置
 * [^x]	        匹配除了x以外的任意字符
 * [^aeiou]	    匹配除了aeiou这几个字母以外的任意字符
 */

// 例子：\S+匹配不包含空白符的字符串。
var str = `asdasd sdadsad adad`;
var regexp = /\S+/g; 
var res = str.match(regexp);
console.log(res);

// 匹配非空格非_的字符
var str = `asd_asd sdadsad adad`;
var regexp = /\b[^_ ]+\b/g; 
var res = str.match(regexp);
console.log(res);

// 通过分组获取，可以方便输出对应的内容 res[1] == A  res[3] == 奥迪 一汽奥迪
// 注意如果加上/g则无法输出分组信息
var str = `A 奥迪 一汽奥迪`;
var regexp = /^([A-Z])( )(.+)$/;
var res = str.match(regexp);
console.log(res);

// <a[^>]+>匹配用尖括号括起来的以a开头的字符串
var str = `<asf>`;
var regexp = /<a[^>]+>/g;
var res = str.match(regexp);
console.log(res);

// 匹配div标签及包裹的内容
var str = `
<div>
ds
</div>

<div class="11212">
sd
</div>

<html>

</html>
`;
var regexp = /<div[^>]*>([\w\s]*)<\/div>/g;
var res = str.match(regexp);
console.log(res);
 
//通过正则表达式获取 标签内的内容 
var regexp1 = />([\w\s]*)</;
var res1 = res[0].match(regexp1);
console.log(res1[1]);

/*******************************************************************
 * 十、后向引用
 *******************************************************************/
// 使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。
// 后向引用用于重复搜索前面某个分组匹配的文本。例如，\1代表分组1匹配的文本。难以理解？请看示例：

// \b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。 
// 中文匹配需要单独设定 
// 注意，如果后面没有\b将不能单词匹配
var str = `go go    abc kitty kittyssdasda 测试 测试`;
var regexp = /\b(\w+)\b\s+\1\b/g;
var res = str.match(regexp);
console.log(res);

var str = `0000-111-0000`;
var regexp = /(\d{4})-\d{3}-\1/;
var res = str.match(regexp);
console.log(res);

// 你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?<Word>\w+)(或者把尖括号换成'也行：(?'Word'\w+)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\k<Word>,所以上一个例子也可以写成这样：\b(?<Word>\w+)\b\s+\k<Word>\b。
// JS正则不支持分组命名，但是可以直接使用$1$2$...操作replace
var str = `06-30-2012`;
// var regexp = /(?<num>\d{4})-\d{3}-\k<num>/;
var regexp = /(\d{2})-(\d{2})-(\d{4})/;
var res = str.replace(regexp, '$3-$1-$2')
console.log(res);

// 呃……其实,组号分配还不像我刚说得那么简单：
// 分组0对应整个正则表达式
// 实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号
// 你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权

/**
 * 表4.常用分组语法
 * 分类	        代码/语法	    说明
 * 捕获	        
 *              (exp)	         匹配exp,并捕获文本到自动命名的组里
 *              (?<name>exp)	 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp) --- js不支持
 *              (?:exp)	         匹配exp,不捕获匹配的文本，也不给此分组分配组号
 * 零宽断言	      
 *              (?=exp)	         匹配exp前面的位置
 *              (?<=exp)	     匹配exp后面的位置
 *              (?!exp)	         匹配后面跟的不是exp的位置
 *              (?<!exp)	     匹配前面不是exp的位置
 * 注释	       
 *              (?#comment)	     这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读
 */

// (?:exp) 匹配exp,不捕获匹配的文本，也不给此分组分配组号  (?:\d{3})这一组将不会输出res里，res[1]为 (\w)的匹配 aaa
var str = `333aaa`;
var regexp = /(?:\d{3})(\w+)/;
var res = str.match(regexp);
console.log(res);

/*******************************************************************
 * 十一、零宽断言
 *******************************************************************/
// 接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。最好还是拿例子来说明吧：

// (?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I'm singing while you're dancing.时，它会匹配sing和danc。
// (?=exp)	         匹配exp前面的位置
var str = `I'm singing while you're dancing.`;
var regexp = /\b\w+(?=ing\b)/g;
var res = str.match(regexp);
console.log(res);

// (?<=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?<=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。
var str = `reading a book`;
var regexp = /(?<=\bre)\w+\b/g;
var res = str.match(regexp);
console.log(res);

// 测试 (?<=exp) (?=exp) 组合，查找<div>之间的内容</div>
var str = `
<div>
abcd
</div>`;
var regexp = /(?<=<div>)[\w\s]+(?=<\/div>)/;
var res = str.match(regexp);
console.log(res);

var str = `-a-b-a-c-d-`;
var regexp = /(?<=-)[\w\s]+(?=-)/g;
var res = str.match(regexp);
console.log(res);

// 假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?<=\d)\d{3})+\b，用它对1234567890进行查找时结果是234567890。

var str = `6664567890123`;
var regexp = /(?<=\d)(\d{3})+\b/;
var res = str.match(regexp);
var regexp1 = /\d{3}/g;
var res1 = res[0].match(regexp1);
console.log(str[0] + ',' + res1.join(','));

// 不用正则实现
// var num_s = "6664567890123.000";
// console.log(parseFloat(num_s).toLocaleString());

// 下面这个例子同时使用了这两种断言：(?<=\s)\d+(?=\s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)。
var str = `
  123456 234567   
  345678 456789
56789 6789
567
`;
var regexp = /(?<=\s)?\d+(?=\s)?/g; // 可以适配前后无空格的情况
var res = str.match(regexp);
console.log(res);

// 地球人，是不是觉得这些术语名称太复杂，太难记了？我也有同感。知道有这么一种东西就行了，它叫什么，随它去吧！人若无名，便可专心练剑；物若无名，便可随意取舍……
// 断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。

/*******************************************************************
 * 十二、负向零宽断言
 *******************************************************************/
// 前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词--它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：

// (?!exp)	         匹配后面跟的不是exp的位置

// \b\w*q[^u]\w*\b匹配包含后面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w*\b将会匹配下一个单词，于是\b\w*q[^u]\w*\b就能匹配整个Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：\b\w*q(?!u)\w*\b。

var str = `Iraq fighting fqae absqu aqqqqu Iraq Benq qua qq aqqa perhapsquqsoutdated`;

var regexp = /\b\w*q(?!q*u)\w*\b/g;  // 这里有点问题 qqu也会被匹配
var res = str.match(regexp);
console.log(res);

// 零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。

// 例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；
var str = `11111 111ba`;
var regexp = /\b\d{3}(?!\d)/g;
var res = str.match(regexp);
console.log(res, '\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字');

// \b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。
var str = `abc 12abc12 12a1 12abc`;
var regexp = /\b((?!abc)\w)+\b/g;
var res = str.match(regexp);
console.log(res);

// \b((?!ph)\w)+\b匹配不包含ph的单词。(如果要筛选，那么就再匹配一次包含p的单词就行了)
var str = `python php ruby javascript jsonp perhapsphpisoutdated`;
var regexp = /\b((?!ph)\w)+\b/g;
var res = str.match(regexp);
console.log(res);
var str = `python ruby javascript jsonp`;
var regexp = /\b\w*p\w*\b/g;
var res = str.match(regexp);
console.log(res);

// 同理，我们可以用(?<!exp),零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?<![a-z])\d{7}匹配前面不是小写字母的七位数字。
var str = `A1111111 a2222222`;
var regexp = /(?<![a-z])\d{7}/;
var res = str.match(regexp);
console.log(res, '(?<![a-z])\d{7}匹配前面不是小写字母的七位数字');

// 一个更复杂的例子：(?<=<(\w+)>).*(?=<\/\1>)匹配不包含属性的简单HTML标签内里的内容。
// (?<=<(\w+)>)指定了这样的前缀：被尖括号括起来的单词(比如可能是<b>)，
// 然后是.*(任意的字符串),
// 最后是一个后缀(?=<\/\1>)。注意后缀里的\/，它用到了前面提过的字符转义；
// \1则是一个反向引用，引用的正是捕获的第一组，前面的(\w+)匹配的内容，这样如果前缀实际上是<b>的话，后缀就是</b>了。
// 整个表达式匹配的是<b>和</b>之间的内容(再次提醒，不包括前缀和后缀本身)。

// 注意，它只匹配一个位置，并不消费任何字符
// (?=exp)	匹配exp前面的位置
// (?<=exp)	匹配exp后面的位置
var str = `<div>sda</div>`;
var regexp = /(?<=<(\w+)>).*(?=<\/\1>)/;
var res = str.match(regexp);
console.log(res, '(?<=<(\w*)>).*(?=<\/\1>)匹配不包含属性的简单HTML标签内里的内容。');

// 匹配指定字符之间的内容
var str = `
<div id="dropdownsHerstellerSelectItem0" class="rf-sel-opt">CHEVROLET EUROPE / DAEWOO (GM)</div><div id="dropdownsHerstellerSelectItem1" class="rf-sel-opt">一汽轿车 / FAW</div><div id="dropdownsHerstellerSelectItem2" class="rf-sel-opt">三菱 (东南) / MITSUBISHI (DONGNAN)</div><div id="dropdownsHerstellerSelectItem3" class="rf-sel-opt">三菱 (北京吉普) / MITSUBISHI (BJC)</div><div id="dropdownsHerstellerSelectItem4" class="rf-sel-opt rf-sel-sel">三菱 (北京奔驰) / MITSUBISHI (BBDC)</div><div id="dropdownsHerstellerSelectItem5" class="rf-sel-opt">三菱 (广汽三菱) / MITSUBISHI (GMMC)</div><div id="dropdownsHerstellerSelectItem6" class="rf-sel-opt">三菱 / MITSUBISHI (进口)</div><div id="dropdownsHerstellerSelectItem7" class="rf-sel-opt">东南汽车 / DONGNAN</div><div id="dropdownsHerstellerSelectItem8" class="rf-sel-opt">东风汽车 / DFAC</div>	
`;
//  (?<=<div id=\"dropdownsHerstellerSelectItem\d{0,3}\" class=\"rf-sel-opt\">)  匹配前面的位置，不包含此内容
// .*?  懒惰匹配中间的内容
// (?=<\/div>) 匹配后面的位置，不包含此内容
var regexp = /(?<=<div id=\"dropdownsHerstellerSelectItem\d{0,3}\" class=\"rf-sel-opt\">).*?(?=<\/div>)/g;
var res = str.match(regexp);
console.log(JSON.stringify(res));


// 请详细分析表达式(?<=<(\w+)>).*(?=<\/\1>)，这个表达式最能表现零宽断言的真正用途。
// 能够取得两个指定字符之间的内容，并不包含前后的规则

/*******************************************************************
 * 十三、注释 js不支持
 *******************************************************************/
// 小括号的另一种用途是通过语法(?#comment)来包含注释。例如：2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)。

// 要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：

//       (?<=    # 断言要匹配的文本的前缀
//       <(\w+)> # 查找尖括号括起来的字母或数字(即HTML/XML标签)
//       )       # 前缀结束
//       .*      # 匹配任意文本
//       (?=     # 断言要匹配的文本的后缀
//       <\/\1>  # 查找尖括号括起来的内容：前面是一个"/"，后面是先前捕获的标签
//       )       # 后缀结束

/*******************************************************************
 * 十四、贪婪与懒惰
 *******************************************************************/
// 当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。
// 有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：
// a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。
var str = `a1234ba2224b`;
var regexp = /a.*?b/;
var res = str.match(regexp);
console.log(res, '/a.*?b/懒惰匹配，智能匹配第一个a-b 结果adsadadab');

var str = `aabab`;
var regexp = /a.*?b/g;
var res = str.match(regexp);
console.log(res, '/a.*?b/懒惰匹配，带上g全局方式，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）');

//为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权——The match that begins earliest wins。

/**
 * 表5.懒惰限定符
 * 代码/语法	 说明
 * *?	        重复任意次，但尽可能少重复
 * +?	        重复1次或更多次，但尽可能少重复
 * ??	        重复0次或1次，但尽可能少重复
 * {n,m}?	    重复n到m次，但尽可能少重复
 * {n,}?	    重复n次以上，但尽可能少重复
 */

 /*******************************************************************
 * 十五、处理选项
 *******************************************************************/

// 上面介绍了几个选项如忽略大小写，处理多行等，这些选项能用来改变处理正则表达式的方式。下面是.Net中常用的正则表达式选项：

// 表6.常用的处理选项
// 名称	说明
// IgnoreCase(忽略大小写)	匹配时不区分大小写。
// Multiline(多行模式)	更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)
// Singleline(单行模式)	更改.的含义，使它与每一个字符匹配（包括换行符\n）。
// IgnorePatternWhitespace(忽略空白)	忽略表达式中的非转义空白并启用由#标记的注释。
// ExplicitCapture(显式捕获)	仅捕获已被显式命名的组。
// 一个经常被问到的问题是：是不是只能同时使用多行模式和单行模式中的一种？答案是：不是。这两个选项之间没有任何关系，除了它们的名字比较相似（以至于让人感到疑惑）以外。