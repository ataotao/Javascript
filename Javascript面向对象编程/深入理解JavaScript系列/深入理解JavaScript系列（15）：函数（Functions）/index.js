/**************************************************************************
 * 函数类型
 ***************************************************************************/
console.log('------------函数声明------------');
/**
 * 函数声明（缩写为FD）是这样一种函数：
 * 
 * 有一个特定的名称
 * 在源码中的位置：要么处于程序级（Program level），要么处于其它函数的主体（FunctionBody）中
 * 在进入上下文阶段创建
 * 影响变量对象
 * 
 * 这种函数类型的主要特点在于它们仅仅影响变量对象（即存储在上下文的VO中的变量对象）。
 * 该特点也解释了第二个重要点（它是变量对象特性的结果）——在代码执行阶段它们已经可用（因为FD在进入上下文阶段已经存在于VO中——代码执行之前）。
 */

function exampleFunc() {

}

console.log('------------函数表达式------------');
/**
 * 函数表达式（缩写为FE）是这样一种函数：
 * 
 * 在源码中须出现在表达式的位置
 * 有可选的名称
 * 不会影响变量对象
 * 在代码执行阶段创建
 * 
 * 我们为什么需要函数表达式？答案很明显——在表达式中使用它们，”不会污染”变量对象。最简单的例子是将一个函数作为参数传递给其它函数。
 */

var foo = function () {

};


var foo = function _foo() {

};

// 还有一个例子是：在代码执行阶段通过条件语句进行创建FE，不会污染变量对象VO。

var foo = 10;

var bar = (foo % 2 == 0
    ? function () { console.log(0); }
    : function () { console.log(1); }
);

bar(); // 0


console.log('------------关于圆括号立即执行函数------------');
(function () {
    console.log('(function(){}');
})();

// 注意是1,后面的声明
1, function () {
    console.log('1, function () {}');
}();

// 或者这个
!function () {
    console.log('!function () {}');
}();

console.log('------------通过函数构造器创建的函数------------');
(function () {
    
    new Function('console.log(1);');

})();